// Basic demo for readings from Adafruit SCD30
#include <Adafruit_SCD30.h>
#include "config.h"
#include <WiFi.h>
#include <Arduino.h>
#include <Wire.h>
#include <vl53l4cx_class.h>
#include <string.h>
#include <stdlib.h>
#include <stdio.h>
#include <stdint.h>
#include <assert.h>
#include <stdlib.h>


#define DEV_I2C Wire
#define SerialPort Serial




VL53L4CX sensor_vl53l4cx_sat(&DEV_I2C, A1);
AdafruitIO_Feed *temperature = io.feed("temperature");
AdafruitIO_Feed *humidity = io.feed("humidity");
AdafruitIO_Feed *C02 = io.feed("C02");
AdafruitIO_Feed *TOF = io.feed("TOF");






void setup(void) {
 Serial.begin(115200);
 while (!Serial) delay(10);     // will pause Zero, Leonardo, etc until serial console opens


 Serial.println("Adafruit SCD30 test!");


 // Try to initialize!
 if (!scd30.begin()) {
   Serial.println("Failed to find SCD30 chip");
   while (1) { delay(10); }
 }
 Serial.println("SCD30 Found!");
 WiFi.mode(WIFI_STA);
 WiFi.begin(ssid, password);
 Serial.print("Connecting to WiFi ..");




 if (WiFi.status() == WL_CONNECTED) {
       Serial.println("\nConnected to Wifi");
       blinkPattern(10,100);
       break;
 io.connect();

 }
 if (io.status() < AIO_CONNECTED) {
   Serial.print(".");
   delay(500);
 }


 // we are connected
 Serial.println();
 Serial.println(io.statusText());


 Serial.print("Measurement Interval: ");
 Serial.print(scd30.getMeasurementInterval());
 Serial.println(" seconds");


 // Initialize I2C bus.
 DEV_I2C.begin();


 // Configure VL53L4CX satellite component.
 sensor_vl53l4cx_sat.begin();


 // Switch off VL53L4CX satellite component.
 sensor_vl53l4cx_sat.VL53L4CX_Off();


 //Initialize VL53L4CX satellite component.
 sensor_vl53l4cx_sat.InitSensor(0x12);


 // Start Measurements
 sensor_vl53l4cx_sat.VL53L4CX_StartMeasurement();
}


void loop() {
 io.run();


 if (scd30.dataReady()){
   Serial.println("Data available!");


   if (!scd30.read()){ Serial.println("Error reading sensor data"); return; }


   Serial.print(scd30.temperature);
  
   Serial.print(scd30.relative_humidity);
  
   Serial.print(scd30.CO2, 3);


   temperature->save(scd30.temperature);
   humidity->save(scd30.relative_humidity);
   C02->save(scd30.CO2, 3);
 } else {
   //Serial.println("No data");
 } VL53L4CX_MultiRangingData_t MultiRangingData;
 VL53L4CX_MultiRangingData_t *pMultiRangingData = &MultiRangingData;
 uint8_t NewDataReady = 0;
 int no_of_object_found = 0, j;
 char report[64];
 int status;


 do {
   status = sensor_vl53l4cx_sat.VL53L4CX_GetMeasurementDataReady(&NewDataReady);
 } while (!NewDataReady);


 if ((!status) && (NewDataReady != 0)) {
   status = sensor_vl53l4cx_sat.VL53L4CX_GetMultiRangingData(pMultiRangingData);
   no_of_object_found = pMultiRangingData->NumberOfObjectsFound;
   snprintf(report, sizeof(report), "Distance", pMultiRangingData->StreamCount, no_of_object_found);
   SerialPort.print(report);
   for (j = 0; j < no_of_object_found; j++) {
     if (j != 0) {
       SerialPort.print("\r\n                               ");
     }
 
     SerialPort.print(", D=");
     SerialPort.print(pMultiRangingData->RangeData[j].RangeMilliMeter);
     TOF->save(pMultiRangingData->RangeData[j].RangeMilliMeter);


     SerialPort.print("mm");
   }
 
   if (status == 0) {
     status = sensor_vl53l4cx_sat.VL53L4CX_ClearInterruptAndStartMeasurement();
   }
 }


 delay(5000);
}
